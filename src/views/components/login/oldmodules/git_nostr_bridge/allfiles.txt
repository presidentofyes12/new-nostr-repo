Home dir: ~/oldhome/home/impromise/Downloads/Telegram Desktop/nostr-w-relay-main (2)/nostr-w-relay-main (1)/src/views/components/login/odoo-nostr-project/odoo_custom_addons/git_nostr_bridge/

=== ./models/git_repository.py ===
# models/git_repository.py
import os
import git
from odoo import models, fields, api, _
from odoo.exceptions import UserError

class GitRepository(models.Model):
    _name = 'git.repository'
    _description = 'Git Repository'

    name = fields.Char(string='Name', required=True)
    path = fields.Char(string='Local Path', required=True)
    remote_url = fields.Char(string='Remote URL')
    branch = fields.Char(string='Current Branch', default='main')
    last_commit = fields.Char(string='Last Commit', readonly=True)

    @api.model
    def create(self, vals):
        repo = super(GitRepository, self).create(vals)
        repo._initialize_repository()
        return repo

    def _initialize_repository(self):
        if not os.path.exists(self.path):
            os.makedirs(self.path)
            repo = git.Repo.init(self.path)
            if self.remote_url:
                repo.create_remote('origin', self.remote_url)
            open(os.path.join(self.path, 'README.md'), 'w').close()
            repo.index.add(['README.md'])
            repo.index.commit('Initial commit')
            self.last_commit = repo.head.commit.hexsha

    def action_pull(self):
        repo = git.Repo(self.path)
        origin = repo.remotes.origin
        origin.pull()
        self.last_commit = repo.head.commit.hexsha

    def action_push(self):
        repo = git.Repo(self.path)
        origin = repo.remotes.origin
        origin.push()

    def action_commit(self):
        return {
            'name': _('Create Commit'),
            'type': 'ir.actions.act_window',
            'res_model': 'create.nostr.event.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {'default_repository_id': self.id, 'default_event_type': 'commit'},
        }
=== ./models/__init__.py ===
from . import git_repository
from . import nostr_event
from . import res_config_settings
=== ./models/res_users.py ===
from odoo import models, fields, api
from nostr.key import PrivateKey

class ResUsers(models.Model):
    _inherit = 'res.users'

    nostr_public_key = fields.Char(string="Nostr Public Key")
    nostr_private_key = fields.Char(string="Nostr Private Key")
    nostr_relay_url = fields.Char(string="Nostr Relay URL")

    @api.depends('nostr_private_key')
    def _compute_public_key(self):
        for user in self:
            if user.nostr_private_key:
                try:
                    private_key = PrivateKey.from_nsec(user.nostr_private_key)
                    user.nostr_public_key = private_key.public_key.hex()
                except Exception:
                    user.nostr_public_key = False
            else:
                user.nostr_public_key = False

    @api.model
    def create(self, vals):
        if 'nostr_private_key' not in vals or not vals['nostr_private_key']:
            private_key = PrivateKey()
            vals['nostr_private_key'] = private_key.bech32()
        return super(ResUsers, self).create(vals)
=== ./models/nostr_event.py ===
import asyncio
import json
import logging
import websockets
from urllib.parse import urlparse
import time
import traceback

from odoo import models, fields, api, _
from odoo.exceptions import UserError
from nostr.event import Event as NostrLibEvent
from nostr.key import PrivateKey

_logger = logging.getLogger(__name__)

class NostrEvent(models.Model):
    _name = 'nostr.event'
    _description = 'Nostr Event'

    name = fields.Char(string='Name', required=True)
    event_type = fields.Selection([
        ('repo_anchor', 'Repository Anchor'),
        ('branch', 'Branch'),
        ('commit', 'Commit'),
        ('tree', 'Tree'),
        ('blob', 'Blob'),
    ], string='Event Type', required=True)
    content = fields.Text(string='Content')
    tags = fields.Text(string='Tags')
    published = fields.Boolean(string='Published', default=False)
    event_id = fields.Char(string='Event ID', readonly=True)
    kind = fields.Integer(string='Nostr Event Kind', default=1)

    @api.model
    def action_publish(self, event_id):
        event = self.browse(event_id)
        _logger.info(f"Starting publish action for event: {event.name}")
        start_time = time.time()

        try:
            if not self.env.user.nostr_private_key:
                raise UserError(_("Nostr private key is not set for the current user."))

            _logger.info("Generating private key")
            try:
                private_key = PrivateKey.from_nsec(self.env.user.nostr_private_key)
                _logger.info("Private key generated successfully")
            except Exception as e:
                _logger.error(f"Failed to generate private key: {str(e)}")
                _logger.error(traceback.format_exc())
                raise UserError(_("Invalid Nostr private key: %s") % str(e))

            public_key = private_key.public_key.hex()
            _logger.info(f"Public key: {public_key}")

            _logger.info("Parsing tags")
            try:
                tags = json.loads(event.tags) if event.tags else []
                _logger.info(f"Parsed tags: {tags}")
                if not isinstance(tags, list):
                    raise ValueError("Tags must be a list of lists")
                for tag in tags:
                    if not isinstance(tag, list):
                        raise ValueError("Each tag must be a list")
            except json.JSONDecodeError as e:
                _logger.error(f"JSON decode error: {str(e)}")
                _logger.error(traceback.format_exc())
                raise UserError(_("Invalid tags format. Please ensure tags are in valid JSON format."))
            except ValueError as e:
                _logger.error(f"Value error: {str(e)}")
                _logger.error(traceback.format_exc())
                raise UserError(_("Invalid tags format: %s") % str(e))

            _logger.info("Creating Nostr event")
            nostr_event = NostrLibEvent(
                kind=1,  # Assuming TEXT_NOTE, adjust if needed
                content=str(event.content),
                tags=tags,
                public_key=public_key  # Ensure public_key is provided
            )
            private_key.sign_event(nostr_event)
            _logger.info(f"Event created: {nostr_event.to_message()}")

            _logger.info("Fetching relay URLs")
            relay_urls = self.env['ir.config_parameter'].sudo().get_param('git_nostr_bridge.relay_urls', '').split(',')
            relay_urls = [url.strip() for url in relay_urls if url.strip()][:5]  # Limit to 5 relays
            _logger.info(f"Relay URLs: {relay_urls}")

            if not relay_urls:
                raise UserError(_("No Nostr relay URLs configured. Please set them in the settings."))

            _logger.info("Validating relay URLs")
            for url in relay_urls:
                parsed = urlparse(url)
                if parsed.scheme not in ('ws', 'wss'):
                    _logger.error(f"Invalid relay URL: {url}")
                    raise UserError(_("Invalid relay URL: %s. Must start with ws:// or wss://") % url)

            async def publish_to_relay(relay_url, nostr_event, retries=3):
                for attempt in range(retries):
                    try:
                        _logger.info(f"Attempting to connect to {relay_url} (attempt {attempt + 1})")
                        connection_start = time.time()
                        async with websockets.connect(relay_url, timeout=30) as websocket:
                            connection_end = time.time()
                            _logger.info(f"Connected to {relay_url} in {connection_end - connection_start:.2f} seconds")
                            
                            message = nostr_event.to_message()
                            _logger.debug(f"Raw event message: {message}")
                            
                            # The message is already in the correct format, so we don't need to modify it
                            _logger.info(f"Sending Nostr event to {relay_url}: {message}")
                            
                            send_start = time.time()
                            await websocket.send(message)
                            send_end = time.time()
                            _logger.info(f"Sent message to {relay_url} in {send_end - send_start:.2f} seconds")
                            
                            _logger.info(f"Waiting for response from {relay_url}")
                            response_start = time.time()
                            response = await asyncio.wait_for(websocket.recv(), timeout=10.0)
                            response_end = time.time()
                            _logger.info(f"Received response from {relay_url} in {response_end - response_start:.2f} seconds: {response}")
                            
                            try:
                                return json.loads(response)
                            except json.JSONDecodeError as e:
                                _logger.error(f"Failed to parse response from {relay_url}: {str(e)}")
                                return f"Invalid response from {relay_url}: {response}"
                    except (websockets.exceptions.WebSocketException, asyncio.TimeoutError) as e:
                        _logger.error(f"Error publishing to {relay_url} (attempt {attempt + 1}): {str(e)}")
                        _logger.error(traceback.format_exc())
                        await asyncio.sleep(5 * (attempt + 1))  # Increased delay between attempts
                return f"Failed to publish to {relay_url} after {retries} attempts"

            async def publish_with_timeout():
                tasks = [publish_to_relay(url, nostr_event) for url in relay_urls]
                return await asyncio.gather(*tasks, return_exceptions=True)

            async def run_publication():
                _logger.info("Starting publication process")
                try:
                    results = await asyncio.wait_for(publish_with_timeout(), timeout=120)  # Increased overall timeout
                    _logger.info(f"Publication results: {results}")
                    return results
                except asyncio.TimeoutError:
                    _logger.error("Publication process timed out after 120 seconds")
                    raise UserError(_("Publishing timed out after 120 seconds"))

            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                results = loop.run_until_complete(run_publication())
            finally:
                loop.close()

            success = any(isinstance(result, list) and result[0] == "OK" for result in results)
            if success:
                event.write({
                    'published': True,
                    'event_id': nostr_event.id
                })
                _logger.info(f"Successfully published Nostr event: {nostr_event.id}")
                
                # Verify event publication
                self.verify_event_publication(nostr_event.id, relay_urls)
                
                end_time = time.time()
                _logger.info(f"Total publish action time: {end_time - start_time:.2f} seconds")
                
                return {
                    'type': 'ir.actions.client',
                    'tag': 'display_notification',
                    'params': {
                        'message': _("Nostr event successfully published to at least one relay."),
                        'type': 'success',
                        'sticky': False,
                    }
                }
            else:
                error_messages = [str(result) for result in results if isinstance(result, str)]
                _logger.error(f"Failed to publish Nostr event: {'; '.join(error_messages)}")
                raise UserError(_("Failed to publish Nostr event: %s") % "; ".join(error_messages))

        except Exception as e:
            _logger.error(f"Unexpected error in action_publish: {str(e)}")
            _logger.error(traceback.format_exc())
            raise UserError(_("An unexpected error occurred: %s") % str(e))

    @api.model
    def verify_event_publication(self, event_id, relay_urls, max_attempts=5, delay=2):
        _logger.info(f"Starting verification for event: {event_id}")
        for attempt in range(max_attempts):
            _logger.info(f"Verification attempt {attempt + 1}")
            for url in relay_urls:
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    result = loop.run_until_complete(self.query_event(url, event_id))
                    if result:
                        _logger.info(f"Event {event_id} found on relay {url}")
                        return True
                except Exception as e:
                    _logger.error(f"Error querying event from {url}: {str(e)}")
                    _logger.error(traceback.format_exc())
                finally:
                    loop.close()
            _logger.info(f"Waiting {delay} seconds before next attempt")
            time.sleep(delay)
        _logger.warning(f"Event {event_id} not found on any relay after {max_attempts} attempts")
        return False

    async def query_event(self, relay_url, event_id):
        _logger.info(f"Querying event {event_id} from {relay_url}")
        start_time = time.time()
        try:
            async with websockets.connect(relay_url, timeout=10) as websocket:
                request = json.dumps(["REQ", "query", {"ids": [event_id]}])
                _logger.info(f"Sending query to {relay_url}: {request}")
                await websocket.send(request)
                response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                _logger.info(f"Response from {relay_url}: {response}")
                end_time = time.time()
                _logger.info(f"Query to {relay_url} took {end_time - start_time:.2f} seconds")
                return json.loads(response)
        except Exception as e:
            _logger.error(f"Error querying {relay_url}: {str(e)}")
            _logger.error(traceback.format_exc())
            end_time = time.time()
            _logger.info(f"Failed query to {relay_url} took {end_time - start_time:.2f} seconds")
            return None
=== ./models/res_config_settings.py ===
import requests
import json
from odoo import fields, models, api
import logging

_logger = logging.getLogger(__name__)

class ResConfigSettings(models.TransientModel):
    _inherit = 'res.config.settings'

    git_nostr_relay_urls = fields.Char(
        string="Nostr Relay URLs", 
        config_parameter='git_nostr_bridge.relay_urls',
        default=lambda self: self._default_nostr_relays()
    )

    def _default_nostr_relays(self):
        return self._get_top_nostr_relays()

    @api.model
    def _get_top_nostr_relays(self, limit=108):
        url = "https://api.nostr.watch/v1/online"
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            _logger.info(f"Response status code: {response.status_code}")
            
            data = response.json()
            _logger.info(f"API response (first 108 items): {data[:108]}")
            
            relays = data[:108]
            _logger.info(f"Number of relay links found: {len(relays)}")
            _logger.info(f"Extracted relays (first 5): {relays[:5]}")
            
            relay_urls = ",".join(relays)
            return relay_urls
        except requests.RequestException as e:
            _logger.error(f"Error fetching Nostr relays: {e}")
            return "wss://nostr-relay.app,wss://nos.lol,wss://relay.snort.social,wss://relay.nostr.net"

    nostr_relay_urls = fields.Char(
        string="Nostr Relay URLs", 
        config_parameter='nostr_bridge.relay_urls',
        default=_default_nostr_relays
    )

    @api.model
    def get_values(self):
        res = super(ResConfigSettings, self).get_values()
        ICPSudo = self.env['ir.config_parameter'].sudo()
        
        relay_urls = ICPSudo.get_param('git_nostr_bridge.relay_urls')
        if not relay_urls:
            relay_urls = self._default_nostr_relays()
            ICPSudo.set_param('git_nostr_bridge.relay_urls', relay_urls)
            _logger.info(f"Set new relay URLs: {relay_urls[:100]}...")
        else:
            _logger.info(f"Using existing relay URLs: {relay_urls[:100]}...")
        
        res.update(git_nostr_relay_urls=relay_urls)
        return res

    def set_values(self):
        super(ResConfigSettings, self).set_values()
        ICPSudo = self.env['ir.config_parameter'].sudo()
        if self.git_nostr_relay_urls:
            ICPSudo.set_param('git_nostr_bridge.relay_urls', self.git_nostr_relay_urls)
            _logger.info(f"Updated relay URLs: {self.git_nostr_relay_urls[:100]}...")
        else:
            default_urls = self._default_nostr_relays()
            ICPSudo.set_param('git_nostr_bridge.relay_urls', default_urls)
            _logger.info(f"Set default relay URLs: {default_urls[:100]}...")
=== ./models/git_repository ===
# models/git_repository.py
import os
import git
from odoo import models, fields, api, _
from odoo.exceptions import UserError

class GitRepository(models.Model):
    _name = 'git.repository'
    _description = 'Git Repository'

    name = fields.Char(string='Name', required=True)
    path = fields.Char(string='Local Path', required=True)
    remote_url = fields.Char(string='Remote URL')
    branch = fields.Char(string='Current Branch', default='main')
    last_commit = fields.Char(string='Last Commit', readonly=True)

    @api.model
    def create(self, vals):
        repo = super(GitRepository, self).create(vals)
        repo._initialize_repository()
        return repo

    def _initialize_repository(self):
        if not os.path.exists(self.path):
            os.makedirs(self.path)
            repo = git.Repo.init(self.path)
            if self.remote_url:
                repo.create_remote('origin', self.remote_url)
            open(os.path.join(self.path, 'README.md'), 'w').close()
            repo.index.add(['README.md'])
            repo.index.commit('Initial commit')
            self.last_commit = repo.head.commit.hexsha

    def action_pull(self):
        repo = git.Repo(self.path)
        origin = repo.remotes.origin
        origin.pull()
        self.last_commit = repo.head.commit.hexsha

    def action_push(self):
        repo = git.Repo(self.path)
        origin = repo.remotes.origin
        origin.push()

    def action_commit(self):
        return {
            'name': _('Create Commit'),
            'type': 'ir.actions.act_window',
            'res_model': 'create.nostr.event.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {'default_repository_id': self.id, 'default_event_type': 'commit'},
        }
=== ./__init__.py ===
from . import models
from . import wizard
=== ./__manifest__.py ===
{
    'name': 'Git-Nostr Bridge',
    'version': '1.0',
    'category': 'Tools',
    'summary': 'Integrates Git repositories with Nostr network',
    'author': 'Your Name',
    'website': 'https://www.example.com',
    'depends': ['base', 'mail', 'nostr_auth', 'nostr_bridge'],
    'data': [
        'security/ir.model.access.csv',
        'views/git_repository_views.xml',
        'views/nostr_event_views.xml',
        'views/res_config_settings_views.xml',
        'views/res_users_views.xml',
        'wizard/create_nostr_event_wizard_views.xml',
    ],
    'installable': True,
    'application': True,
    'auto_install': False,
    'external_dependencies': {
        'python': ['git', 'nostr', 'websockets'],
    },
}
=== ./allfiles.txt ===
=== ./wizard/create_nostr_event_wizard.py ===
# wizard/create_nostr_event_wizard.py
from odoo import models, fields, api
import git
import json

class CreateNostrEventWizard(models.TransientModel):
    _name = 'create.nostr.event.wizard'
    _description = 'Create Nostr Event Wizard'

    repository_id = fields.Many2one('git.repository', string='Repository', required=True)
    event_type = fields.Selection([
        ('repo_anchor', 'Repository Anchor'),
        ('branch', 'Branch'),
        ('commit', 'Commit'),
        ('tree', 'Tree'),
        ('blob', 'Blob'),
    ], string='Event Type', required=True)
    commit_message = fields.Text(string='Commit Message')
    branch_name = fields.Char(string='Branch Name')
    file_content = fields.Text(string='File Content')
    file_name = fields.Char(string='File Name')

    def action_create_event(self):
        repo = git.Repo(self.repository_id.path)
        
        if self.event_type == 'commit':
            # Stage all changes
            repo.git.add(A=True)
            # Commit changes
            commit = repo.index.commit(self.commit_message)
            self.repository_id.last_commit = commit.hexsha
            content = json.dumps({
                'type': 'commit',
                'repository': self.repository_id.name,
                'commit_hash': commit.hexsha,
                'message': self.commit_message,
            })
        elif self.event_type == 'branch':
            repo.git.checkout('-b', self.branch_name)
            self.repository_id.branch = self.branch_name
            content = json.dumps({
                'type': 'branch',
                'repository': self.repository_id.name,
                'branch_name': self.branch_name,
            })
        elif self.event_type == 'blob':
            with open(os.path.join(self.repository_id.path, self.file_name), 'w') as f:
                f.write(self.file_content)
            repo.index.add([self.file_name])
            commit = repo.index.commit(f"Add file: {self.file_name}")
            self.repository_id.last_commit = commit.hexsha
            content = json.dumps({
                'type': 'blob',
                'repository': self.repository_id.name,
                'file_name': self.file_name,
                'commit_hash': commit.hexsha,
            })
        
        self.env['nostr.event'].create({
            'name': f"{self.event_type.capitalize()} - {self.repository_id.name}",
            'event_type': self.event_type,
            'content': content,
            'tags': json.dumps([['r', self.repository_id.remote_url]]),
        })

        return {'type': 'ir.actions.act_window_close'}
=== ./wizard/__init__.py ===
# wizard/__init__.py
from . import create_nostr_event_wizard
=== ./wizard/create_nostr_event_wizard_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_create_nostr_event_wizard_form" model="ir.ui.view">
        <field name="name">create.nostr.event.wizard.form</field>
        <field name="model">create.nostr.event.wizard</field>
        <field name="arch" type="xml">
            <form string="Create Nostr Event">
                <group>
                    <field name="repository_id"/>
                    <field name="event_type"/>
                    <field name="commit_message" attrs="{'invisible': [('event_type', '!=', 'commit')], 'required': [('event_type', '=', 'commit')]}"/>
                    <field name="branch_name" attrs="{'invisible': [('event_type', '!=', 'branch')], 'required': [('event_type', '=', 'branch')]}"/>
                    <field name="file_name" attrs="{'invisible': [('event_type', '!=', 'blob')], 'required': [('event_type', '=', 'blob')]}"/>
                    <field name="file_content" attrs="{'invisible': [('event_type', '!=', 'blob')], 'required': [('event_type', '=', 'blob')]}" widget="ace" options="{'mode': 'xml'}"/>
                </group>
                <footer>
                    <button name="action_create_event" string="Create Event" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>

    <record id="action_create_nostr_event_wizard" model="ir.actions.act_window">
        <field name="name">Create Nostr Event</field>
        <field name="res_model">create.nostr.event.wizard</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
    </record>
</odoo>
=== ./security/ir.model.access.csv ===
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_git_repository,access_git_repository,model_git_repository,base.group_user,1,1,1,1
access_nostr_event,access_nostr_event,model_nostr_event,base.group_user,1,1,1,1
access_create_nostr_event_wizard,access_create_nostr_event_wizard,model_create_nostr_event_wizard,base.group_user,1,1,1,0
=== ./views/res_users_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_users_form_inherit_git_nostr" model="ir.ui.view">
        <field name="name">res.users.form.inherit.git.nostr</field>
        <field name="model">res.users</field>
        <field name="inherit_id" ref="base.view_users_form"/>
        <field name="arch" type="xml">
            <notebook position="inside">
                <page string="Nostr Settings" name="nostr_settings">
                    <group>
                        <field name="nostr_private_key" password="True"/>
                        <field name="nostr_public_key"/>
                    </group>
                </page>
            </notebook>
        </field>
    </record>
</odoo>
=== ./views/res_config_settings_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="res_config_settings_view_form" model="ir.ui.view">
        <field name="name">res.config.settings.view.form.inherit.git_nostr_bridge</field>
        <field name="model">res.config.settings</field>
        <field name="inherit_id" ref="base.res_config_settings_view_form"/>
        <field name="arch" type="xml">
            <xpath expr="//div[hasclass('settings')]" position="inside">
                <div class="app_settings_block" data-string="Git-Nostr Bridge" string="Git-Nostr Bridge" data-key="git_nostr_bridge">
                    <h2>Nostr Settings</h2>
                    <div class="row mt16 o_settings_container">
                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_left_pane"/>
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">Nostr Relay URLs</span>
                                <div class="text-muted">
                                    Comma-separated list of Nostr relay URLs
                                </div>
                                <div class="content-group">
                                    <div class="mt16">
                                        <field name="git_nostr_relay_urls"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </xpath>
        </field>
    </record>
</odoo>
=== ./views/nostr_event_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_nostr_event_form" model="ir.ui.view">
        <field name="name">nostr.event.form</field>
        <field name="model">nostr.event</field>
        <field name="arch" type="xml">
            <form>
                <header>
                    <button name="action_publish" string="Publish" type="object" class="oe_highlight" attrs="{'invisible': [('published', '=', True)]}"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="event_type"/>
                        <field name="content"/>
                        <field name="tags"/>
                        <field name="published"/>
                        <field name="event_id"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <record id="action_nostr_event" model="ir.actions.act_window">
        <field name="name">Nostr Events</field>
        <field name="res_model">nostr.event</field>
        <field name="view_mode">tree,form</field>
    </record>

    <menuitem id="menu_nostr_event" name="Nostr Events" parent="menu_git_nostr_bridge" action="action_nostr_event" sequence="20"/>
</odoo>
=== ./views/git_repository_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_git_repository_form" model="ir.ui.view">
        <field name="name">git.repository.form</field>
        <field name="model">git.repository</field>
        <field name="arch" type="xml">
            <form>
                <header>
                    <button name="action_pull" string="Pull" type="object" class="oe_highlight"/>
                    <button name="action_push" string="Push" type="object" class="oe_highlight"/>
                    <button name="action_commit" string="Commit" type="object" class="oe_highlight"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="path"/>
                        <field name="remote_url"/>
                        <field name="branch"/>
                        <field name="last_commit"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <record id="action_git_repository" model="ir.actions.act_window">
        <field name="name">Git Repositories</field>
        <field name="res_model">git.repository</field>
        <field name="view_mode">tree,form</field>
    </record>

    <menuitem id="menu_git_nostr_bridge" name="Git-Nostr Bridge" sequence="10"/>
    <menuitem id="menu_git_repository" name="Git Repositories" parent="menu_git_nostr_bridge" action="action_git_repository" sequence="10"/>
</odoo>
