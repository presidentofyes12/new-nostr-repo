<!DOCTYPE html><html dir="ltr" xmlns="http://www.w3.org/1999/xhtml"><head lang="en">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
    <meta name="viewport" content="user-scalable=1.0,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="format-detection" content="telephone=no">
    <meta name="robots" content="noindex,nofollow">
    <link rel="manifest" href="{{{domainurl}}}manifest.json">
    <link rel="shortcut icon" type="image/x-icon" href="{{{domainurl}}}favicon.ico">
    <link keeplink="1" type="text/css" href="styles/style.css" media="screen" rel="stylesheet" title="CSS">
    <link rel="apple-touch-icon" href="/favicon-303x303.png">
    <script type="text/javascript" src="scripts/common-0.0.1{{min}}.js"></script>
    <script keeplink="1" type="text/javascript" src="scripts/u2f-api{{min}}.js"></script>
    <title>{{{title}}} - Login</title>
    <style>
        #body {
            background-color: cadetblue;
            background: linear-gradient(to bottom right, #369, #036);
        }

        #flink a:link {
            color: #c8c8c8;
        }

        #flink a:visited {
            color: #c8c8c8;
        }

        #flink a:hover {
            color: #c8c8c8;
        }

        #flink a:active {
            color: #c8c8c8;
        }

        #welcomeText a:link {
            color: #FFF;
        }

        #welcomeText a:visited {
            color: #FFF;
        }

        #welcomeText a:hover {
            color: #FFF;
        }

        #welcomeText a:active {
            color: #FFF;
        }
    </style>
</head>
<body id="body" onload="if (typeof(startup) !== 'undefined') startup();" class="arg_hide login">
    <div id="backgroundImage" style="position:absolute;left:0;bottom:0;z-index:-1;height:60%;width:100%;opacity:0.1;background-image:url('welcome.png');background-repeat:no-repeat;background-position:left bottom;background-size:contain"></div>
    <table id="centralTable" class="container" style="height:100%;z-index:1">
        <tbody><tr>
            <td id="logincell">
                {{{titlehtml}}}
                <img id="loginPicture">
                <div style="font-size:46px;font-family:Arial,Helvetica,sans-serif;font-weight:bold;padding-bottom:10px;color:#c8c8c8;text-shadow: 2px 2px 2px #000;">{{{title1}}}<sup style="font-size:20px"> {{{title2}}}</sup></div>
                <div id="loginpanel" style="display:none;box-shadow:1px 1px 4px #000">
                    <form id="loginpanelform" method="post">
                        <input type="hidden" name="action" value="login">
                        <div id="message1"></div>
                        <div id="loginuserpassdiv" style="display:none">
                            <table style="width:100%">
                                <tbody><tr>
                                    <td>
                                        <input id="username" title="사용자 이름" style="box-sizing:border-box;width:280px;border:0;border-radius:4px;padding:8px;background-color:#FFF8CC" {{{autocomplete}}}="username" placeholder="사용자 이름" type="text" maxlength="64" name="username" onchange="validateLogin(1)" onkeyup="validateLogin(1,event)">
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <input id="password" title="암호" style="box-sizing:border-box;width:280px;border:0;border-radius:4px;padding:8px;background-color:#FFF8CC" {{{autocomplete}}}="current-password" placeholder="암호" type="password" maxlength="256" name="password" onchange="validateLogin(2)" onkeyup="validateLogin(2,event)">
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div id="showPassHintLink" title="비밀번호 힌트" style="box-sizing:border-box;width:280px;border:0;border-radius:4px;padding:8px;background-color:#FFF8CC;display:none"><a onclick="return showPassHint(event);" href="#" style="cursor:pointer">힌트 표시</a></div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <input id="loginButton" style="box-sizing:border-box;width:280px;border:0;border-radius:4px;padding:6px" onclick="submitButtonClicked('loginpanelform')" type="button" value="로그인" disabled="disabled">
                                    </td>
                                </tr>
                                <tr id="topLanguageSelectRow" style="display:none"><td id="topLanguageSelect"></td></tr>
                            </tbody></table>
                            <div id="hrAccountDiv" style="display:none"><hr></div>
                            <div id="resetAccountDiv" style="display:none;padding:2px">
                                <span id="resetAccountSpan">아이디/비밀번호를 잊어 버리셨습니까?</span> <a onclick="return xgo(3,event);" href="#" style="cursor:pointer">계정 초기화</a>.
                            </div>
                            <div id="newAccountDiv" style="display:none;padding:2px;padding-top:10px">
                                계정이 없습니까? <a onclick="return xgo(2,event);" href="#" style="cursor:pointer">한 가지 만들기</a>.
                            </div>
                        </div>
                        <input id="loginformargs" name="urlargs" type="hidden" value="">
                        <div id="authStrategies" style="display:none">
                            <hr id="loginuserpasshr" style="display:none">
                            <div style="margin-bottom:8px">기존 계정을 사용하여 로그인</div>
                            <a id="auth-twitter" href="auth-twitter" style="display:none"><img src="images/login/twitter32.png" srcset="images/login/twitter64.png 2x" loading="lazy" width="32" height="32" style="margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer" title="Twitter를 사용하여 로그인"></a>
                            <a id="auth-google" href="auth-google" style="display:none"><img src="images/login/google32.png" srcset="images/login/google64.png 2x" loading="lazy" width="32" height="32" style="margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer" title="Google을 사용하여 로그인"></a>
                            <a id="auth-github" href="auth-github" style="display:none"><img src="images/login/github32.png" srcset="images/login/github64.png 2x" loading="lazy" width="32" height="32" style="margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer" title="GitHub를 사용하여 로그인"></a>
                            <a id="auth-azure" href="auth-azure" style="display:none"><img src="images/login/azure32.png" srcset="images/login/azure64.png 2x" loading="lazy" width="32" height="32" style="margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer" title="Azure를 사용하여 로그인"></a>
                            <a id="auth-oidc" href="auth-oidc" style="display:none"><img src="images/login/oidc32.png" srcset="images/login/oidc64.png 2x" loading="lazy" width="32" height="32" style="margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer" title="OpenID Connect를 사용하여 로그인"></a>
                            <a id="auth-oidc-azure" href="auth-oidc" style="display:none"><img src="images/login/azure32.png" srcset="images/login/azure64.png 2x" loading="lazy" width="32" height="32" style="margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer" title="Sign-in with Azure using OpenID Connect"></a>
                            <a id="auth-oidc-google" href="auth-oidc" style="display:none"><img src="images/login/google32.png" srcset="images/login/google64.png 2x" loading="lazy" width="32" height="32" style="margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer" title="Sign-in with Google using OpenID Connect"></a>
                            <a id="auth-jumpcloud" href="auth-jumpcloud" style="display:none"><img src="images/login/jumpcloud32.png" srcset="images/login/jumpcloud64.png 2x" loading="lazy" width="32" height="32" style="margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer" title="JumpCloud를 사용하여 로그인"></a>
                            <a id="auth-intel" href="auth-intel" style="display:none"><img src="images/login/intel32.png" srcset="images/login/intel64.png 2x" loading="lazy" width="32" height="32" style="margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer" title="Intel을 사용하여 로그인"></a>
                            <a id="auth-saml" href="auth-saml" style="display:none"><img src="images/login/generic32.png" srcset="images/login/generic64.png 2x" loading="lazy" width="32" height="32" style="margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer" title="단일 로그인"></a>
                        </div>
                    </form>
                </div>
                <div id="createpanel" style="display:none;position:relative">
                    <form id="createpanelform" method="post">
                        <input type="hidden" name="action" value="createaccount">
                        <div id="message2"></div>
                        <div>
                            <b>계정 생성</b>
                        </div>
                        <div id="passwordPolicyCallout" style="display:none"></div>
                        <table>
                            <tbody><tr id="nuUserRow">
                                <td id="nuUser" align="right" width="100">사용자 이름:</td>
                                <td><input id="ausername" type="text" {{{autocomplete}}}="username" name="username" onchange="validateCreate(1)" maxlength="64" onkeydown="haltReturn(event)" onkeyup="validateCreate(1,event)"></td>
                            </tr>
                            <tr>
                                <td id="nuEmail" align="right" width="100">이메일:</td>
                                <td><input id="aemail" type="text" {{{autocomplete}}}="email" inputmode="email" name="email" onchange="validateCreate(2)" maxlength="256" onkeydown="haltReturn(event)" onkeyup="validateCreate(2,event)"></td>
                            </tr>
                            <tr>
                                <td id="nuPass1" align="right">암호:</td>
                                <td><input id="apassword1" type="password" name="password1" {{{autocomplete}}}="new-password" maxlength="256" onkeydown="haltReturn(event)" onchange="validateCreate(3,event)" onkeyup="validateCreate(3,event)"></td>
                            </tr>
                            <tr>
                                <td id="nuPass2" align="right">암호:</td>
                                <td><input id="apassword2" type="password" name="password2" {{{autocomplete}}}="new-password" maxlength="256" onkeydown="haltReturn(event)" onchange="validateCreate(4,event)" onkeyup="validateCreate(4,event)"></td>
                            </tr>
                            <tr id="createPanelHint" style="display:none">
                                <td id="nuHint" align="right">비밀번호 힌트:</td>
                                <td><input id="apasswordhint" type="text" name="apasswordhint" {{{autocomplete}}}="off" maxlength="256" onkeydown="haltReturn(event)" onchange="validateCreate(5,event)" onkeyup="validateCreate(5,event)"></td>
                            </tr>
                            <tr id="newAccountPass" title="계정 생성 토큰을 입력하십시오">
                                <td id="nuToken" align="right">생성 토큰 : </td>
                                <td><input id="anewaccountpass" type="password" name="anewaccountpass" {{{autocomplete}}}="off" maxlength="256" onkeydown="haltReturn(event)" onchange="validateCreate(6,event)" onkeyup="validateCreate(6,event)"></td>
                            </tr>
                            <tr id="newAccountCaptchaImg" title="CAPTCHA image">
                                <td></td>
                                <td colspan="2"><img src="{{{newAccountCaptchaImage}}}" loading="lazy"></td>
                            </tr>
                            <tr id="newAccountCaptcha" title="Security check">
                                <td id="nuCaptcha" align="right">Security Check:</td>
                                <td><input id="anewaccountcaptcha" type="text" name="anewaccountcaptcha" {{{autocomplete}}}="off" maxlength="256" onkeydown="haltReturn(event)" onchange="validateCreate(7,event)" onkeyup="validateCreate(7,event)"></td>
                            </tr>
                            <tr>
                                <td colspan="2">
                                    <div style="float:right"><input id="createButton" type="button" onclick="submitButtonClicked('createpanelform')" value="계정 만들기" disabled="disabled"></div>
                                    <div id="passWarning" style="padding-top:6px"></div>
                                </td>
                            </tr>
                        </tbody></table>
                        <hr><a onclick="return xgo(1,event);" href="#" style="cursor:pointer">로그인으로 돌아가기</a>
                        <input id="createformargs" name="urlargs" type="hidden" value="">
                        <input id="createformcaptcha" name="captchaargs" type="hidden" value="{{{newAccountCaptcha}}}">
                    </form>
                </div>
                <div id="resetpanel" style="display:none">
                    <form id="resetpanelform" method="post">
                        <input type="hidden" name="action" value="resetaccount">
                        <div id="message3"></div>
                        <div>
                            <b>계정 재설정</b>
                        </div>
                        <table style="width:100%;margin-top:4px;margin-bottom:4px">
                            <tbody><tr>
                                <td>
                                    <input id="remail" title="이메일" style="box-sizing:border-box;width:280px;border:0;border-radius:4px;padding:8px;background-color:#FFF8CC" {{{autocomplete}}}="username" placeholder="이메일" type="text" maxlength="256" name="email" onchange="validateReset()" onkeyup="validateReset(event)">
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <input id="eresetButton" style="box-sizing:border-box;width:280px;border:0;border-radius:4px;padding:6px" type="button" onclick="submitButtonClicked('resetpanelform')" value="계정 초기화" disabled="disabled">
                                </td>
                            </tr>
                        </tbody></table>
                        <hr><a onclick="return xgo(1,event);" href="#" style="cursor:pointer">로그인으로 돌아가기</a>
                        <input id="resetformargs" name="urlargs" type="hidden" value="">
                    </form>
                </div>
                <div id="tokenpanel" style="display:none">
                    <form id="tokenpanelform" method="post" {{{autocomplete}}}="off">
                        <input type="hidden" name="action" value="tokenlogin">
                        <input type="hidden" name="hwstate" value="{{{hwstate}}}">
                        <div id="message4"></div>
                        <table style="width:100%">
                            <tbody><tr>
                                <td>
                                    <input id="tokenInput" {{{autocomplete}}}="one-time-code" title="토큰" style="box-sizing:border-box;width:280px;border:0;border-radius:4px;padding:8px;background-color:#FFF8CC" placeholder="토큰" type="text" maxlength="50" name="token" onchange="checkToken(event)" onpaste="checkToken(event)" onkeyup="checkToken(event)" onkeydown="checkToken(event)"><br>
                                    <input id="hwtokenInput" type="text" name="hwtoken" style="display:none">
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div>
                                        <input id="tokenOkButton" style="box-sizing:border-box;width:280px;border:0;border-radius:4px;padding:6px" type="button" onclick="submitButtonClicked('tokenpanelform')" value="로그인" disabled="disabled">
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td style="align-content:center;padding-top:10px">
                                    <label id="tokenInputRememberLabel"><input id="tokenInputRemember" name="remembertoken" type="checkbox"><span id="tokenInputRememberSpan"></span></label>
                                </td>
                            </tr>
                            <tr id="2farow">
                                <td>
                                    <hr>
                                    <div>
                                        <img id="securityKeyButton" src="images/login/2fa-key-48.png" srcset="images/login/2fa-key-96.png 2x" title="보안키 사용" loading="lazy" width="48" height="48" style="display:none;margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer;background-color:#FFF" onclick="useSecurityKey(1)">
                                        <img id="smsKeyButton" src="images/login/2fa-sms-48.png" srcset="images/login/2fa-sms-96.png 2x" title="SMS" loading="lazy" width="48" height="48" style="display:none;margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer;background-color:#FFF" onclick="useSMSToken(1)">
                                        <img id="msgKeyButton" src="images/login/2fa-messaging-48.png" srcset="images/login/2fa-messaging-96.png 2x" title="Messaging" loading="lazy" width="48" height="48" style="display:none;margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer;background-color:#FFF" onclick="useMsgToken(1)">
                                        <img id="emailKeyButton" src="images/login/2fa-mail-48.png" srcset="images/login/2fa-mail-96.png 2x" title="이메일" loading="lazy" width="48" height="48" style="display:none;margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer;background-color:#FFF" onclick="useEmailToken(1)">
                                        <img id="pushKeyButton" src="images/login/2fa-push-48.png" srcset="images/login/2fa-push-96.png 2x" title="장치 인증" loading="lazy" width="48" height="48" style="display:none;margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer;background-color:#FFF" onclick="usePushToken(1)">
                                    </div>
                                </td>
                            </tr>
                        </tbody></table>
                        <hr><a onclick="return xgo(1,event);" href="#" style="cursor:pointer">로그인으로 돌아가기</a>
                        <input id="tokenformargs" name="urlargs" type="hidden" value="">
                    </form>
                </div>
                <div id="resettokenpanel" style="display:none">
                    <form id="resettokenpanelform" method="post">
                        <input type="hidden" name="action" value="resetaccount">
                        <div id="message5"></div>
                        <table style="width:100%">
                            <tbody><tr>
                                <td>
                                    <input id="resetTokenInput" {{{autocomplete}}}="one-time-code" title="토큰" style="box-sizing:border-box;width:280px;border:0;border-radius:4px;padding:8px;background-color:#FFF8CC" placeholder="토큰" type="text" maxlength="50" name="token" onchange="resetCheckToken(event)" onpaste="resetCheckToken(event)" onkeyup="resetCheckToken(event)" onkeydown="resetCheckToken(event)"><br>
                                    <input id="resetHwtokenInput" type="text" name="hwtoken" style="display:none">
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div>
                                        <input id="resetTokenOkButton" style="box-sizing:border-box;width:280px;border:0;border-radius:4px;padding:6px" type="button" onclick="submitButtonClicked('resettokenpanelform')" value="로그인" disabled="disabled">
                                    </div>
                                </td>
                            </tr>
                            <tr id="2farow2">
                                <td colspan="2">
                                    <hr>
                                    <div>
                                        <img id="securityKeyButton2" src="images/login/2fa-key-48.png" srcset="images/login/2fa-key-96.png 2x" title="보안키 사용" loading="lazy" width="48" height="48" style="display:none;margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer;background-color:#FFF" onclick="useSecurityKey(2)">
                                        <img id="smsKeyButton2" src="images/login/2fa-sms-48.png" srcset="images/login/2fa-sms-96.png 2x" title="SMS" loading="lazy" width="48" height="48" style="display:none;margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer;background-color:#FFF" onclick="useSMSToken(2)">
                                        <img id="msgKeyButton2" src="images/login/2fa-msg-48.png" srcset="images/login/2fa-msg-96.png 2x" title="SMS" loading="lazy" width="48" height="48" style="display:none;margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer;background-color:#FFF" onclick="useMsgToken(2)">
                                        <img id="emailKeyButton2" src="images/login/2fa-mail-48.png" srcset="images/login/2fa-mail-96.png 2x" title="이메일" loading="lazy" width="48" height="48" style="display:none;margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer;background-color:#FFF" onclick="useEmailToken(2)">
                                        <img id="pushKeyButton2" src="images/login/2fa-push-48.png" srcset="images/login/2fa-push-96.png 2x" title="장치 인증" loading="lazy" width="48" height="48" style="display:none;margin-left:3px;margin-right:3px;border-radius:3px;box-shadow:2px 2px 5px black;cursor:pointer;background-color:#FFF" onclick="usePushToken(2)">
                                    </div>
                                </td>
                            </tr>
                        </tbody></table>
                        <hr><a onclick="return xgo(1,event);" href="#" style="cursor:pointer">로그인으로 돌아가기</a>
                        <input id="resettokenformargs" name="urlargs" type="hidden" value="">
                    </form>
                </div>
                <div id="resetpasswordpanel" style="display:none;position:relative">
                    <form id="resetpasswordpanelform" method="post">
                        <input type="hidden" name="action" value="resetpassword">
                        <div id="message6"></div>
                        <div id="rpasswordPolicyCallout" style="display:none"></div>
                        <table>
                            <tbody><tr>
                                <td id="rnuPass1" width="100" align="right">암호:</td>
                                <td><input id="rapassword1" type="password" name="rpassword1" {{{autocomplete}}}="off" maxlength="256" onkeydown="haltReturn(event)" onchange="validatePassReset(3,event)" onkeyup="validatePassReset(3,event)"></td>
                            </tr>
                            <tr>
                                <td id="rnuPass2" align="right">암호:</td>
                                <td><input id="rapassword2" type="password" name="rpassword2" {{{autocomplete}}}="off" maxlength="256" onkeydown="haltReturn(event)" onchange="validatePassReset(4,event)" onkeyup="validatePassReset(4,event)"></td>
                            </tr>
                            <tr id="resetpasswordpanelHint" style="display:none">
                                <td id="rnuHint" align="right">비밀번호 힌트:</td>
                                <td><input id="rapasswordhint" type="text" name="rpasswordhint" {{{autocomplete}}}="off" maxlength="256" onkeydown="haltReturn(event)" onchange="validatePassReset(5,event)" onkeyup="validatePassReset(5,event)"></td>
                            </tr>
                            <tr>
                                <td colspan="2">
                                    <div style="float:right"><input id="resetPassButton" type="button" onclick="submitButtonClicked('resetpasswordpanelform')" value="암호 초기화" disabled="disabled"></div>
                                    <div id="rpassWarning" style="padding-top:6px"></div>
                                </td>
                            </tr>
                        </tbody></table>
                        <hr><a onclick="return xgo(1,event);" href="#" style="cursor:pointer">로그인으로 돌아가기</a>
                        <input id="resetpasswordformargs" name="urlargs" type="hidden" value="">
                    </form>
                </div>
                <div id="checkemailpanel" style="display:none;position:relative">
                    <form id="checkemailpanelform" method="post">
                        <input type="hidden" name="action" value="checkemail">
                        <div id="message7"></div>
                        <table id="checkCheckOperations" style="width:100%;display:none">
                            <tbody><tr>
                                <td>
                                    <div id="unconfirmedEmail"></div><br>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div>
                                        <input id="changeEmailButton" type="button" value="이메일 주소 변경" onclick="changeEmailAddress()">
                                        <input id="checkEmailButton2" type="button" value="검증 이메일을 다시 보냅니다." onclick="resentEmailConfirmation()">
                                        <input id="checkEmailButton" type="button" onclick="submitButtonClicked('checkemailpanelform')" style="display:none">
                                        <input id="checkEmailVal" name="email" type="hidden" value="">
                                    </div>
                                </td>
                            </tr>
                        </tbody></table>
                        <hr><a onclick="return xgo(1,event);" href="#" style="cursor:pointer">로그인으로 돌아가기</a>
                        <input id="checkemailformargs" name="urlargs" type="hidden" value="">
                    </form>
                </div>
                <div id="waitpushpanel" style="display:none">
                    <form id="waitpushpanelform" method="post">
                        <input type="hidden" name="action" value="pushlogin">
                        <div id="message8"></div>
                        <table style="width:100%">
                            <tbody><tr>
                                <td style="align-content:center;padding-top:10px">
                                    <img id="waitpushpanelimage" src="images/login/push-150.png" srcset="images/login/push-300.png 2x" style="opacity:0.3" loading="lazy" width="265" height="150">
                                </td>
                            </tr>
                            <tr>
                                <td style="align-content:center;padding-top:10px">
                                    <label id="tokenInputRememberLabel2"><input id="tokenInputRemember2" name="remembertoken" type="checkbox"><span id="tokenInputRememberSpan2"></span></label>
                                </td>
                            </tr>
                        </tbody></table>
                        <hr><a onclick="return xgo(1,event);" href="#" style="cursor:pointer">로그인으로 돌아가기</a>
                        <input id="pushtokenformargs" name="urlargs" type="hidden" value="">
                        <input id="pushtokenInput" name="hwstate" type="hidden" value="">
                        <input id="pushOkButton" onclick="submitButtonClicked('waitpushpanelform')" style="display:none">
                    </form>
                </div>
            </td>
        </tr>
        <tr id="welcomeTextRow"><td><div id="welcomeText" style="color:white;text-align:center;margin-left:20px;margin-right:20px"></div></td></tr>
        <tr id="bottomLanguageSelectRow" style="display:none;text-align:center"><td id="bottomLanguageSelect"></td></tr>
        <tr style="height:20px">
            <td>
                <div>
                    <div id="flink" style="float:right;margin-right:4px;color:#c8c8c8">{{{rootCertLink}}}&nbsp;<a href="terms">약관과 개인정보</a></div>
                    <div id="flink" style="margin-left:4px;color:#c8c8c8">{{{footer}}}</div>
                </div>
            </td>
        </tr>
    </tbody></table>
    <div id="dialog" style="display:none">
        <div id="dialogHeader">
            <div id="id_dialogclose" style="float:right;padding:5px;cursor:pointer" onclick="setDialogMode()"><b>X</b></div>
            <div id="id_dialogtitle" style="padding:5px"></div>
            <div style="width:100%;margin:6px"></div>
        </div>
        <div id="dialogBody">
            <div id="dialog1">
                <div id="id_dialogMessage" style=""></div>
            </div>
            <div id="dialog2" style="">
                <div id="id_dialogOptions"></div>
            </div>
        </div>
        <div id="idx_dlgButtonBar" style="">
            <input id="idx_dlgCancelButton" type="button" value="취소" style="" onclick="dialogclose(0)">
            <input id="idx_dlgOkButton" type="button" value="확인" style="" onclick="dialogclose(1)">
        </div>
    </div>
    <script>
        'use strict';
        var random = '{{{randomlength}}}' // Random length string for BREACH mitigation
        var welcomePictureFullScreen = (decodeURIComponent('{{{welcomePictureFullScreen}}}') === 'true');
        var passlogin = '{{{passlogin}}}';
        var passhint = '{{{passhint}}}';
        var loginMode = '{{{loginmode}}}';
        var newAccount = '{{{newAccount}}}';
        var newAccountPass = parseInt('{{{newAccountPass}}}');
        var newAccountCaptcha = '{{{newAccountCaptcha}}}';
        var emailCheck = '{{{emailcheck}}}';
        var passRequirements = '{{{passRequirements}}}';
        var hardwareKeyChallenge = decodeURIComponent('{{{hkey}}}');
        if (passRequirements != '') { passRequirements = JSON.parse(decodeURIComponent(passRequirements)); } else { passRequirements = {}; }
        var passRequirementsEx = ((passRequirements.min != null) || (passRequirements.max != null) || (passRequirements.upper != null) || (passRequirements.lower != null) || (passRequirements.numeric != null) || (passRequirements.nonalpha != null));
        var features = parseInt('{{{features}}}');
        var welcomeText = decodeURIComponent('{{{welcometext}}}');
        var currentpanel = 0;
        var publicKeyCredentialRequestOptions = null;
        var otpemail = (decodeURIComponent('{{{otpemail}}}') === 'true');
        var otpsms = (decodeURIComponent('{{{otpsms}}}') === 'true');
        var otpmsg = (decodeURIComponent('{{{otpmsg}}}') === 'true');
        var otppush = (decodeURIComponent('{{{otppush}}}') === 'true');
        var autofido = (decodeURIComponent('{{{autofido}}}') === 'true');
        var twoFactorCookieDays = parseInt('{{{twoFactorCookieDays}}}');
        var authStrategies = '{{{authStrategies}}}'.split(',');
        var tokenTimeout = parseInt('{{{tokenTimeout}}}');
        var websocket = null;
        var formSubmitted = false;
        var serverLangs = '{{{renderLanguages}}}'.split(',');
        var loclist = { 'af': "아프리카 어", 'sq': "알바니아", 'ar': "아랍어 (표준)", 'ar-dz': "아랍어 (알제리)", 'ar-bh': "아랍어 (바레인)", 'ar-eg': "아랍어 (이집트)", 'ar-iq': "아랍어 (이라크)", 'ar-jo': "아랍어 (요르단)", 'ar-kw': "아랍어 (쿠웨이트)", 'ar-lb': "아랍어 (레바논)", 'ar-ly': "아랍어 (리비아)", 'ar-ma': "아랍어 (모로코)", 'ar-om': "아랍어 (오만)", 'ar-qa': "아랍어 (카타르)", 'ar-sa': "아랍어 (사우디 아라비아)", 'ar-sy': "아랍어 (시리아)", 'ar-tn': "아랍어 (튀니지)", 'ar-ae': "아랍어 (미국)", 'ar-ye': "아랍어 (예멘)", 'an': "아라곤어", 'hy': "아르메니아어", 'as': "아쌈어", 'ast': "아스투리아어", 'az': "아제르바이잔어", 'eu': "바스크어", 'bg': "불가리아어", 'be': "벨로루시어", 'bn': "벵골어", 'bs': "보스니아어", 'br': "브르타뉴어", 'my': "버마어", 'ca': "카탈로니아어", 'ch': "차모로어", 'ce': "체첸어", 'zh': "중국어", 'zh-hk': "중국어(홍콩)", 'zh-cn': "중국어(PRC)", 'zh-sg': "중국어(싱가포르)", 'zh-tw': "중국어(대만)", 'cv': "추바시어", 'co': "코르시카어", 'cr': "크리어", 'hr': "크로아티아어", 'cs': "체코어", 'da': "덴마크어", 'nl': "네덜란드어 (표준)", 'nl-be': "네덜란드어 (벨기에)", 'en': "영어", 'en-au': "영어 (호주)", 'en-bz': "영어 (벨리즈)", 'en-ca': "영어 (캐나다)", 'en-ie': "영어 (아일랜드)", 'en-jm': "영어 (자메이카)", 'en-nz': "영어 (뉴질랜드)", 'en-ph': "영어 (필리핀)", 'en-za': "영어 (남아프리카)", 'en-tt': "영어 (트리니다드 토바고)", 'en-gb': "영어 (영국)", 'en-us': "영어 (미국)", 'en-zw': "영어 (짐바브웨)", 'eo': "에스페란토어", 'et': "에스토니아어", 'fo': "페로어", 'fa': "페르시아어", 'fj': "피지어", 'fi': "핀란드어", 'fr': "프랑스어 (표준)", 'fr-be': "프랑스어 (벨기에)", 'fr-ca': "프랑스어 (캐나다)", 'fr-fr': "프랑스어 (프랑스)", 'fr-lu': "프랑스어 (룩셈부르크)", 'fr-mc': "프랑스어 (모나코)", 'fr-ch': "프랑스어 (스위스)", 'fy': "프리지아어", 'fur': "프리울리어", 'gd': "게일어 (Scots)", 'gd-ie': "게일어 (아일랜드어)", 'gl': "갈라시아어", 'ka': "조르지아어", 'de': "독일어 (표준)", 'de-at': "독일어 (오스트리아)", 'de-de': "독일어 (독일)", 'de-li': "독일어 (리히텐슈타인)", 'de-lu': "독일어 (룩셈부르크)", 'de-ch': "독일어 (스위스)", 'el': "그리스어", 'gu': "구주라티어", 'ht': "하이티어", 'he': "히브리어", 'hi': "힌디어", 'hu': "헝가리어", 'is': "아이슬란드어", 'id': "인도네시아어", 'iu': "이누트어", 'ga': "아일랜드어", 'it': "이탈리아어 (표준)", 'it-ch': "이탈리아어 (스위스)", 'ja': "일본어", 'kn': "칸나다어", 'ks': "카시미르어", 'kk': "카자흐어", 'km': "크메르어", 'ky': "키르기즈어", 'tlh': "클링온어", 'ko': "한국어", 'ko-kp': "조선어 (북한)", 'ko-kr': "한국어 (한국)", 'la': "라틴어", 'lv': "라트비아어", 'lt': "리투아니아어", 'lb': "룩셈부르크어", 'mk': "FYRO 마케도니아어", 'ms': "말레이어", 'ml': "말라얄람어", 'mt': "몰티즈어", 'mi': "마오리어", 'mr': "마라티어", 'mo': "몰다비아어", 'nv': "나바호어", 'ng': "은동가어", 'ne': "네팔어", 'no': "노르웨이어", 'nb': "노르웨이어 (Bokmal)", 'nn': "노르웨이어 (니 노르 스크)", 'oc': "오크어", 'or': "오리야어", 'om': "오로모어", 'fa-ir': "페르시아어 /이란", 'pl': "폴란드어", 'pt': "포르투갈인", 'pt-br': "포르투갈어 (브라질)", 'pa': "펀자브어", 'pa-in': "펀자브어 (인도)", 'pa-pk': "펀자브어 (파키스탄)", 'qu': "케추아어", 'rm': "로마어 (라에토)", 'ro': "루마니아어", 'ro-mo': "루마니아어 (몰다비아)", 'ru': "러시아어", 'ru-mo': "러시아어 (몰다비아)", 'sz': "사미어 (Lappish)", 'sg': "상고어", 'sa': "산스크리트어", 'sc': "사르디니아어", 'sd': "신디어", 'si': "싱할레스어", 'sr': "세르비아어", 'sk': "슬로바키아어", 'sl': "슬로베니아어", 'so': "소마니어", 'sb': "소르비아어", 'es': "스페인어", 'es-ar': "스페인어 (아르헨티나)", 'es-bo': "스페인어 (볼리비아)", 'es-cl': "스페인어 (칠레)", 'es-co': "스페인어 (콜롬비아)", 'es-cr': "스페인어 (코스타리카)", 'es-do': "스페인어 (도미니카 공화국)", 'es-ec': "스페인어 (에콰도르)", 'es-sv': "스페인어 (엘살바도르)", 'es-gt': "스페인어 (과테말라)", 'es-hn': "스페인어 (온두라스)", 'es-mx': "스페인어 (멕시코)", 'es-ni': "스페인어 (니카라과)", 'es-pa': "스페인어 (파나마)", 'es-py': "스페인어 (파라과이)", 'es-pe': "스페인어 (페루)", 'es-pr': "스페인어 (푸에르토 리코)", 'es-es': "스페인어 (스페인)", 'es-uy': "스페인어 (우루과이)", 'es-ve': "스페인어 (베네수엘라)", 'sx': "수투어", 'sw': "스와힐리어", 'sv': "스웨덴어", 'sv-fi': "스웨덴어 (핀란드)", 'sv-sv': "스웨덴어 (스웨덴)", 'ta': "타밀어", 'tt': "타타르어", 'te': "텔루가어", 'th': "태국어", 'tig': "티그레어", 'ts': "손가어", 'tn': "츠와나어", 'tr': "터키어", 'tk': "투르크멘어", 'uk': "우크라이나어", 'hsb': "어퍼 소르비아어", 'ur': "우르두어", 've': "벤다어", 'vi': "베트남어", 'vo': "볼라푸크어", 'wa': "왈론어", 'cy': "웨일스어", 'xh': "코사어", 'ji': "이디시어", 'zu': "줄루어" };
        var loclistex = { 'zh-chs': "중국어(간체)", 'zh-cht': "중국 전통)" };
        var showLanguageSelect = '{{{showLanguageSelect}}}';

        function startup() {
            if (decodeURIComponent('{{{loginpicture}}}') == 'true') { Q('loginPicture').src = "loginlogo.png"; }

            QV('welcomeTextRow', welcomeText != '');
            QH('welcomeText', welcomeText);

            // Change the background image to full screen
            if (welcomePictureFullScreen) {
                QS('backgroundImage').height = '100%';
                QS('backgroundImage').opacity = '1';
                QS('backgroundImage')['background-position'] = 'center center';
                QS('backgroundImage')['background-size'] = 'cover';
            }

            // Display the right server message
            var i;
            var messageid = parseInt('{{{messageid}}}');
            var okmessages = ['', "유효한 경우 메일을 재설정하십시오.", "이메일이 발송되었습니다.", "이메일 검증이 요구됩니다. 당신의 메일박스를 확인하시고, 확인 링크를 클릭해주세요.", "SMS가 전송됨.", "알림을 보내는 중 ...", "Message sent."];
            var failmessages = ["계정을 만들 수 없습니다.", "계정 한도에 도달했습니다.", "이 이메일 주소를 가진 계정이 이미 존재합니다.", "유효하지 않은 계정 생성 토큰입니다.", "사용자 이름이 이미 존재합니다.", "비밀번호가 거부되었습니다. 다른 비밀번호를 사용하십시오.", "유효하지 않은 이메일입니다.", "계정을 찾지 못했습니다.", "유효하지 않은 토큰입니다. 다시 시도하십시오.", "이메일을 보낼 수 없습니다.", "잠긴 계정.", "접근 거절됨.", "로그인에 실패하였습니다. 사용자 이름과 비밀번호를 확인하십시오.", "비밀번호 변경이 요청되었습니다.", "IP 주소가 차단되었습니다. 나중에 다시 시도하십시오.", "유지 보수중인 서버입니다.", "장치 알림을 보낼 수 없습니다.", "Invalid security check."];
            if (messageid > 0) {
                var msg = '';
                if ((messageid < 100) && (messageid < okmessages.length)) { msg = okmessages[messageid]; }
                else if ((messageid >= 100) && ((messageid - 100) < failmessages.length)) { msg = failmessages[messageid - 100]; }
                if (msg != '') {
                    if (messageid >= 100) { msg = ('<span class="msg error"><b style=color:#8C001A>' + msg + '<b></span><br /><br />'); } else { msg = ('<span class="msg success"><b>' + msg + '</b></span><br /><br />'); }
                    for (i = 1; i < 9; i++) { QH('message' + i, msg); }
                }
            }

            // Display flash error Messages
            var flashErrors = JSON.parse('{{{flashErrors}}}');
            if (flashErrors && (flashErrors.length > 0)) {
                var msg = '';
                for (i = 0; i < flashErrors.length; i++) {
                    if (flashErrors[i]) {
                        msg += '<span class="msg error"><b style=color:#8C001A>' + flashErrors[i] + '<b></span><br /><br />';
                    }
                }
                QH('message1', msg);
                QV('message1', true);
            }

            // Fix links if a loginKey if used
            var urlargs = parseUriArgs();
            //if (urlargs.key) { Q('termsLinkFooter').href += '?key=' + urlargs.key; }

            // Show Language Select Box if needed
            if (showLanguageSelect === 'top' || showLanguageSelect === 'bottom') {
                var x = '<select id=d2langselect style="box-sizing:border-box;width:280px;border:0;border-radius:4px;padding:8px" onChange="changeLanguage()">';
                x += '<option value="*">Use Browser Language</option>';
                for (var i in serverLangs) {
                    var lang = serverLangs[i];
                    x += '<option value="' + lang + '"' + ((urlargs.lang == lang)?' selected':'') + '>' + lang + ' - ' + (loclist[lang]?loclist[lang]:loclistex[lang]) + '</option>';
                }
                QH(showLanguageSelect+'LanguageSelect', x);
                if (showLanguageSelect === 'top') QS(showLanguageSelect+'LanguageSelect')['padding-top'] = '5px';
                QV(showLanguageSelect+'LanguageSelectRow', true);
            }

            // Show user/pass login
            passlogin = (passlogin == 'true');
            if (urlargs.passlogin === 1) { passlogin = true; }
            if (urlargs.passlogin === 0) { passlogin = false; }
            QV('loginuserpassdiv', passlogin)
            QV('loginuserpasshr', passlogin)

            // Setup two factor cookie time
            if (twoFactorCookieDays > 0) {
                QV('tokenInputRememberLabel', true);
                QH('tokenInputRememberSpan', format("이 장치를 {0}일 동안 기억하십시오.", twoFactorCookieDays));
                QV('tokenInputRememberLabel2', true);
                QH('tokenInputRememberSpan2', format("이 장치를 {0}일 동안 기억하십시오.", twoFactorCookieDays));
            } else {
                QV('tokenInputRememberLabel', false);
                QV('tokenInputRememberLabel2', false);
            }

            // If URL arguments are provided, add them to form posts
            if (window.location.href.indexOf('?') > 0) {
                var xurlargs = window.location.href.substring(window.location.href.indexOf('?'));
                Q('loginformargs').value = xurlargs;
                Q('createformargs').value = xurlargs;
                Q('resetformargs').value = xurlargs;
                Q('tokenformargs').value = xurlargs;
                Q('pushtokenformargs').value = xurlargs;
                Q('resettokenformargs').value = xurlargs;
                Q('resetpasswordformargs').value = xurlargs;
                Q('checkemailformargs').value = xurlargs;
            }

            if ((features & 32) == 0) {
                // Guard against other site's top frames (web bugs).
                var loc = null;
                try { loc = top.location.toString().toLowerCase(); } catch (e) { }
                if (top != self && (loc == null || top.active == false)) { top.location = self.location; return; }
            }

            if (features & 0x200000) { // Email is username
                Q('username').placeholder = "이메일";
                QH('resetAccountSpan', "비밀번호를 잊으셨나요?");
                QV('nuUserRow', false);
            }

            QV('createPanelHint', passRequirements.hint === true);
            QV('resetpasswordpanelHint', passRequirements.hint === true);

            // Setup authentication strategies
            if (authStrategies != '') {
                QV('authStrategies', true);
                if (authStrategies.indexOf('twitter') >= 0) { QV('auth-twitter', true); }
                if (authStrategies.indexOf('google') >= 0) { QV('auth-google', true); }
                if (authStrategies.indexOf('github') >= 0) { QV('auth-github', true); }
                if (authStrategies.indexOf('azure') >= 0) { QV('auth-azure', true); }
                if (authStrategies.indexOf('oidc') >= 0) { QV('auth-oidc', true); }
                if (authStrategies.indexOf('oidc-azure') >= 0) { QV('auth-oidc-azure', true); }
                if (authStrategies.indexOf('oidc-google') >= 0) { QV('auth-oidc-google', true); }
                if (authStrategies.indexOf('jumpcloud') >= 0) { QV('auth-jumpcloud', true); }
                if (authStrategies.indexOf('intel') >= 0) { QV('auth-intel', true); }
                if (authStrategies.indexOf('saml') >= 0) { QV('auth-saml', true); }
            }

            validateLogin();
            validateCreate();
            if (loginMode.length != 0) { go(parseInt(loginMode)); } else { go(1); }
            QV('newAccountDiv', (newAccount === '1') || (newAccount === 'true')); // If new accounts are not allowed, don't display the new account link.
            if ((passhint != null) && (passhint.length > 0)) { QV('showPassHintLink', true); }
            QV('newAccountPass', (newAccountPass == 1));
            QV('newAccountCaptcha', (newAccountCaptcha != ''));
            QV('newAccountCaptchaImg', (newAccountCaptcha != ''));
            QV('resetAccountDiv', (emailCheck == 'true'));
            QV('hrAccountDiv', (emailCheck == 'true') || (newAccountPass == 1));

            if (loginMode == '4') {
                if (tokenTimeout > 0) { setTimeout(function () { Q('hwtokenInput').value = '**timeout**'; QE('tokenOkButton', true); Q('tokenOkButton').click(); }, tokenTimeout); }
                try { if (hardwareKeyChallenge.length > 0) { hardwareKeyChallenge = JSON.parse(hardwareKeyChallenge); } else { hardwareKeyChallenge = null; } } catch (ex) { hardwareKeyChallenge = null }
                var twofakey = (hardwareKeyChallenge != null) && (hardwareKeyChallenge.type == 'webAuthn');
                var emailkey = otpemail && (messageid != 2) && (messageid != 4) && (messageid != 6);
                var smskey = otpsms && (messageid != 2) && (messageid != 4) && (messageid != 6);
                var msgkey = otpmsg && (messageid != 2) && (messageid != 4) && (messageid != 6);
                var pushkey = otppush && (messageid != 2) && (messageid != 4) && (messageid != 6);
                QV('securityKeyButton', twofakey);
                QV('emailKeyButton', emailkey);
                QV('smsKeyButton', smskey);
                QV('msgKeyButton', msgkey);
                QV('pushKeyButton', pushkey);
                QV('2farow', twofakey || emailkey || smskey || msgkey || pushkey);

                // If hardware key is an option, trigger it now
                if (autofido && twofakey) { setTimeout(function () { useSecurityKey(1); }, 300); }
            }

            if (loginMode == '5') {
                if (tokenTimeout > 0) { setTimeout(function () { Q('hwtokenInput').value = '**timeout**'; QE('tokenOkButton', true); Q('tokenOkButton').click(); }, tokenTimeout); }
                try { if (hardwareKeyChallenge.length > 0) { hardwareKeyChallenge = JSON.parse(hardwareKeyChallenge); } else { hardwareKeyChallenge = null; } } catch (ex) { hardwareKeyChallenge = null }
                var twofakey = (hardwareKeyChallenge != null) && (hardwareKeyChallenge.type == 'webAuthn');
                var emailkey = otpemail && (messageid != 2) && (messageid != 4) && (messageid != 6);
                var smskey = otpsms && (messageid != 2) && (messageid != 4) && (messageid != 6);
                var msgkey = otpmsg && (messageid != 2) && (messageid != 4) && (messageid != 6);
                var pushkey = otppush && (messageid != 2) && (messageid != 4) && (messageid != 6);
                QV('securityKeyButton2', twofakey);
                QV('emailKeyButton2', emailkey);
                QV('smsKeyButton2', smskey);
                QV('msgKeyButton2', msgkey);
                QV('pushKeyButton', pushkey);
                QV('2farow2', twofakey || emailkey || smskey || msgkey || pushkey);

                // If hardware key is an option, trigger it now
                if (autofido && twofakey) { setTimeout(function () { useSecurityKey(2); }, 300); }
            }

            if (loginMode == '8') {
                // Perform websocket connection to server to wait for device authentication
                websocket = new WebSocket(passhint);
                websocket.onopen = function (e) { QS('waitpushpanelimage')['opacity'] = '1'; }
                websocket.onmessage = function (e) {
                    if (typeof e.data != 'string') { this.close(); }
                    var r = null;
                    try { r = JSON.parse(e.data); } catch (ex) { }
                    if (r.sent === true) {
                        // Request was sent
                        QH('message8', '<span class="msg success"><b>' + format("요청을 보냈습니다. {0}.", r.code) + '</b></span><br /><br />');
                    } else if (r.sent === false) {
                        // Request failed to send
                        QH('message8', '<span class="msg error"><b style=color:#8C001A>' + "요청을 보내지 못했습니다." + '<b></span><br /><br />');
                        QV('tokenInputRememberLabel2', false);
                        this.close();
                    } else if (r.approved === true) {
                        // Request approved
                        this.close();
                        QV('tokenInputRememberLabel2', false);
                        QH('message8', '<span class="msg success"><b>' + "요청이 수락되었습니다." + '</b></span><br /><br />');
                        Q('pushtokenInput').value = r.token;
                        Q('pushOkButton').click();
                    } else {
                        // Request rejected
                        QH('message8', '<span class="msg error"><b style=color:#8C001A>' + "액세스가 거부되었습니다." + '<b></span><br /><br />');
                        QV('tokenInputRememberLabel2', false);
                        this.close();
                    }
                }
                websocket.onclose = function (e) { QS('waitpushpanelimage')['opacity'] = '0.3'; }
                websocket.onerror = function (e) {
                    QH('message8', '<span class="msg error"><b style=color:#8C001A>' + "연결 오류" + '<b></span><br /><br />');
                    QS('waitpushpanelimage')['opacity'] = '0.5';
                }
            }
        }

        function changeLanguage() {
            var lang = Q('d2langselect').value;
            var urlParams = new URLSearchParams(window.location.search);
            if(lang=='*'){ urlParams.delete('lang') } else { urlParams.set('lang', lang); }
            var newURL = window.location.pathname + '?' + urlParams.toString();
            window.location.href = newURL;
        }

        // Use a hardware security key
        function useSecurityKey(panelAction) {
            if ((hardwareKeyChallenge != null) && (hardwareKeyChallenge.type == 'webAuthn')) {
                if (typeof hardwareKeyChallenge.challenge == 'string') { hardwareKeyChallenge.challenge = Uint8Array.from(atob(hardwareKeyChallenge.challenge), function (c) { return c.charCodeAt(0) }).buffer; }

                publicKeyCredentialRequestOptions = { challenge: hardwareKeyChallenge.challenge, allowCredentials: [], timeout: hardwareKeyChallenge.timeout }
                for (var i = 0; i < hardwareKeyChallenge.keyIds.length; i++) {
                    publicKeyCredentialRequestOptions.allowCredentials.push(
                        { id: Uint8Array.from(atob(hardwareKeyChallenge.keyIds[i]), function (c) { return c.charCodeAt(0) }), type: 'public-key', transports: ['usb', 'ble', 'nfc', 'internal'] }
                    );
                }

                // New WebAuthn hardware keys
                navigator.credentials.get({ publicKey: publicKeyCredentialRequestOptions }).then(
                    function (rawAssertion) {
                        var assertion = {
                            id: btoa(String.fromCharCode.apply(null, new Uint8Array(rawAssertion.rawId))),
                            clientDataJSON: btoa(String.fromCharCode.apply(null, new Uint8Array(rawAssertion.response.clientDataJSON))),
                            userHandle: btoa(String.fromCharCode.apply(null, new Uint8Array(rawAssertion.response.userHandle))),
                            signature: btoa(String.fromCharCode.apply(null, new Uint8Array(rawAssertion.response.signature))),
                            authenticatorData: btoa(String.fromCharCode.apply(null, new Uint8Array(rawAssertion.response.authenticatorData))),
                        };
                        if (panelAction == 1) {
                            Q('hwtokenInput').value = JSON.stringify(assertion);
                            QE('tokenOkButton', true);
                            Q('tokenOkButton').click();
                        } else if (panelAction == 2) {
                            Q('resetHwtokenInput').value = JSON.stringify(assertion);
                            QE('resetTokenOkButton', true);
                            Q('resetTokenOkButton').click();
                        }
                    },
                    function (error) { console.log('credentials-get error', error); }
                );
            }
        }

        function useEmailToken(panelAction) {
            if (otpemail != true) return;
            setDialogMode(1, "안전한 로그인", 3, useEmailKeyEx, "등록된 이메일 주소로 토큰을 보내시겠습니까?", panelAction);
        }

        function useEmailKeyEx(b, panelAction) {
            if (panelAction == 1) {
                Q('hwtokenInput').value = '**email**';
                QE('tokenOkButton', true);
                Q('tokenOkButton').click();
            } else if (panelAction == 2) {
                Q('resetHwtokenInput').value = '**email**';
                QE('resetTokenOkButton', true);
                Q('resetTokenOkButton').click();
            }
        }

        function useSMSToken(panelAction) {
            if (otpsms != true) return;
            setDialogMode(1, "안전한 로그인", 3, useSMSTokenEx, "등록된 휴대폰 번호로 토큰을 보내시겠습니까?", panelAction);
        }

        function useSMSTokenEx(b, panelAction) {
            if (panelAction == 1) {
                Q('hwtokenInput').value = '**sms**';
                QE('tokenOkButton', true);
                Q('tokenOkButton').click();
            } else if (panelAction == 2) {
                Q('resetHwtokenInput').value = '**sms**';
                QE('resetTokenOkButton', true);
                Q('resetTokenOkButton').click();
            }
        }

        function useMsgToken(panelAction) {
            if (otpmsg != true) return;
            setDialogMode(1, "안전한 로그인", 3, useMsgTokenEx, "Send token to messaging application?", panelAction);
        }

        function useMsgTokenEx(b, panelAction) {
            if (panelAction == 1) {
                Q('hwtokenInput').value = '**msg**';
                QE('tokenOkButton', true);
                Q('tokenOkButton').click();
            } else if (panelAction == 2) {
                Q('resetHwtokenInput').value = '**msg**';
                QE('resetTokenOkButton', true);
                Q('resetTokenOkButton').click();
            }
        }

        function usePushToken(panelAction) {
            if (panelAction == 1) {
                Q('hwtokenInput').value = '**push**';
                QE('tokenOkButton', true);
                Q('tokenOkButton').click();
            } else if (panelAction == 2) {
                Q('resetHwtokenInput').value = '**push**';
                QE('resetTokenOkButton', true);
                Q('resetTokenOkButton').click();
            }
        }

        function showPassHint(e) {
            messagebox("비밀번호 힌트", passhint);
            haltEvent(e);
            return false;
        }

        function xgo(x, e) {
            QV('message1', false);
            QV('message2', false);
            QV('message3', false);
            QV('message4', false);
            QV('message5', false);
            QV('message6', false);
            QV('message7', false);
            go(x);
            haltEvent(e);
            return false;
        }

        function go(x) {
            currentpanel = x;
            setDialogMode(0);
            QV('showPassHintLink', false);
            QV('loginpanel', x == 1);
            QV('createpanel', x == 2);
            QV('resetpanel', x == 3);
            QV('tokenpanel', x == 4);
            QV('resettokenpanel', x == 5);
            QV('resetpasswordpanel', x == 6);
            QV('checkemailpanel', x == 7);
            QV('waitpushpanel', x == 8);
            if (x == 1) { Q('username').focus(); }
            if (x == 2) { if (features & 0x200000) { Q('aemail').focus(); } else { Q('ausername').focus(); } } // Email is username
            if (x == 3) { Q('remail').focus(); }
            if (x == 4) { Q('tokenInput').focus(); }
            if (x == 5) { Q('resetTokenInput').focus(); }
            if (x == 6) { Q('rapassword1').focus(); }
            if (x == 7) {
                QH('unconfirmedEmail', passhint);
                QV('checkCheckOperations', Q('unconfirmedEmail').innerHTML != '');
                QH('checkEmailVal', passhint);
            }
        }

        function submitButtonClicked(v) {
            if (!formSubmitted) { formSubmitted = true; document.getElementById(v).submit(); }
        }

        function validateLogin(box, e) {
            var ok = ((Q('username').value.length > 0) && (Q('username').value.indexOf(' ') == -1) && (Q('password').value.length > 0));
            QE('loginButton', ok);
            setDialogMode(0);
            if ((e != null) && (e.keyCode == 13)) {
                if ((box == 1) && (Q('username').value != '')) { Q('password').focus(); }
                else if ((box == 2) && (Q('password').value != '')) { Q('loginButton').click(); }
            }
            if (e != null) { haltEvent(e); }
        }

        function validateCreate(box, e) {
            setDialogMode(0);
            var userok = false;
            if (features & 0x200000) { userok = true; } else { userok = (Q('ausername').value.length > 0) && (Q('ausername').value.indexOf(' ') == -1) && (Q('ausername').value.indexOf('"') == -1) && (Q('ausername').value.indexOf(',') == -1); }
            var emailok = (validateEmail(Q('aemail').value) == true);
            var pass1ok = (Q('apassword1').value.length > 0);
            var pass2ok = (Q('apassword2').value.length > 0) && (Q('apassword2').value == Q('apassword1').value);
            var newAccOk = (newAccountPass == 0) || (Q('anewaccountpass').value.length > 0);
            var newCaptchaOk = (newAccountCaptcha == '') || (Q('anewaccountcaptcha').value.length > 0);
            var ok = (userok && emailok && pass1ok && pass2ok && newAccOk);

            // Color the fields
            QS('nuUser').color = userok ? 'black' : '#7b241c';
            QS('nuEmail').color = emailok ? 'black' : '#7b241c';
            QS('nuPass1').color = pass1ok ? 'black' : '#7b241c';
            QS('nuPass2').color = pass2ok ? 'black' : '#7b241c';
            QS('nuToken').color = newAccOk ? 'black' : '#7b241c';
            QS('nuCaptcha').color = newCaptchaOk ? 'black' : '#7b241c';

            if (Q('apassword1').value == '') {
                QH('passWarning', '');
                QV('passwordPolicyCallout', false);
            } else {
                if (!passRequirementsEx) {
                    // No password requirements, display password strength
                    var passStrength = checkPasswordStrength(Q('apassword1').value);
                    if (passStrength >= 80) { QH('passWarning', '<span style=color:green><b>' + "강력한 비밀번호" + '</b><span>'); }
                    else if (passStrength >= 60) { QH('passWarning', '<span style=color:blue><b>' + "좋은 비밀번호" + '</b><span>'); }
                    else { QH('passWarning', '<span style=color:red><b>' + "약한 암호" + '</b><span>'); }
                } else {
                    // Password requirements provided, use that
                    var passReq = checkPasswordRequirements(Q('apassword1').value, passRequirements);
                    if (passReq == false) {
                        ok = false;
                        QS('nuPass1').color = '#7b241c';
                        QS('nuPass2').color = '#7b241c';
                        QH('passWarning', '<div style=color:red;cursor:pointer onclick=showPasswordPolicy()><b>' + "비밀번호 정책" + '</b><div>'); // This is also a link to the password policy
                        QV('passwordPolicyCallout', true);
                        QH('passwordPolicyCallout', passwordPolicyText(Q('apassword1').value));
                    } else {
                        QH('passWarning', '');
                        QV('passwordPolicyCallout', false);
                    }
                }
            }
            if ((e != null) && (e.keyCode == 13)) {
                if ((box == 1) && userok) { Q('aemail').focus(); }
                if ((box == 2) && emailok) { Q('apassword1').focus(); }
                if ((box == 3) && pass1ok) { Q('apassword2').focus(); }
                if ((box == 4) && pass2ok) { if (passRequirements.hint === true) { Q('apasswordhint').focus(); } else { box = 5; } }
                if (box == 5) { if (newAccountPass == 1) { Q('anewaccountpass').focus(); } else { box = 6; } }
                if (box == 6) { if (newAccountCaptcha != '') { Q('anewaccountcaptcha').focus(); } else { box = 7; } }
                if (box == 7) { Q('createButton').click(); }
            }
            if (e != null) { haltEvent(e); }
            QE('createButton', ok);
        }

        function validatePassReset(box, e) {
            setDialogMode(0);
            var pass1ok = (Q('rapassword1').value.length > 0);
            var pass2ok = (Q('rapassword2').value.length > 0) && (Q('rapassword2').value == Q('rapassword1').value);
            var ok = (pass1ok && pass2ok);

            // Color the fields
            QS('rnuPass1').color = pass1ok ? 'black' : '#7b241c';
            QS('rnuPass2').color = pass2ok ? 'black' : '#7b241c';

            if (Q('rapassword1').value == '') {
                QH('rpassWarning', '');
                QV('rpasswordPolicyCallout', false);
            } else {
                if (!passRequirementsEx) {
                    // No password requirements, display password strength
                    var passStrength = checkPasswordStrength(Q('rapassword1').value);
                    if (passStrength >= 80) { QH('rpassWarning', '<span style=color:green><b>' + "강력한 비밀번호" + '</b><span>'); }
                    else if (passStrength >= 60) { QH('rpassWarning', '<span style=color:blue><b>' + "좋은 비밀번호" + '</b><span>'); }
                    else { QH('rpassWarning', '<span style=color:red><b>' + "약한 암호" + '</b><span>'); }
                } else {
                    // Password requirements provided, use that
                    var passReq = checkPasswordRequirements(Q('rapassword1').value, passRequirements);
                    if (passReq == false) {
                        ok = false;
                        QS('rnuPass1').color = '#7b241c';
                        QS('rnuPass2').color = '#7b241c';
                        QH('rpassWarning', '<div style=color:red;cursor:pointer onclick=showPasswordPolicy()><b>' + "비밀번호 정책" + '</b><div>'); // This is also a link to the password policy
                        QV('rpasswordPolicyCallout', true);
                        QH('rpasswordPolicyCallout', passwordPolicyText(Q('rapassword1').value));
                    } else {
                        QH('rpassWarning', '');
                        QV('rpasswordPolicyCallout', false);
                    }
                }
            }
            if ((e != null) && (e.keyCode == 13)) {
                if (box == 2) { Q('rapassword1').focus(); }
                if (box == 3) { Q('rapassword2').focus(); }
                if (box == 4) { Q('rapasswordhint').focus(); }
                if (box == 6) { Q('resetPassButton').click(); }
            }
            if (e != null) { haltEvent(e); }
            QE('resetPassButton', ok);
        }

        function passwordPolicyText(pass) {
            var policy = '<div style=text-align:left>';
            var counts = strCount(pass);
            if (passRequirements.min && ((pass == null) || (pass.length < passRequirements.min))) { policy += format("최소길이 {0}", passRequirements.min) + '<br />'; }
            if (passRequirements.max && ((pass == null) || (pass.length > passRequirements.max))) { policy += format("{0}의 최대 길이", passRequirements.max) + '<br />'; }
            if (passRequirements.upper && ((pass == null) || (counts.upper < passRequirements.upper))) { policy += format("{0} 대문자", passRequirements.upper) + '<br />'; }
            if (passRequirements.lower && ((pass == null) || (counts.lower < passRequirements.lower))) { policy += format("{0} 소문자", passRequirements.lower) + '<br />'; }
            if (passRequirements.numeric && ((pass == null) || (counts.numeric < passRequirements.numeric))) { policy += format("{0} 숫자", passRequirements.numeric) + '<br />'; }
            if (passRequirements.nonalpha && ((pass == null) || (counts.nonalpha < passRequirements.nonalpha))) { policy += format("영숫자가 아닌 {0}", passRequirements.nonalpha) + '<br />'; }
            policy += '</div>';
            return policy;
        }

        function showPasswordPolicy() {
            messagebox("비밀번호 정책", passwordPolicyText());
        }

        function validateReset(e) {
            setDialogMode(0);
            var x = validateEmail(Q('remail').value);
            QE('eresetButton', x);
            if ((e != null) && (e.keyCode == 13) && (x == true)) {
                Q('eresetButton').click();
            }
            if (e != null) { haltEvent(e); }
        }

        // Return a password strength score
        function checkPasswordStrength(password) {
            var r = 0, letters = {}, varCount = 0, variations = { digits: /\d/.test(password), lower: /[a-z]/.test(password), upper: /[A-Z]/.test(password), nonWords: /\W/.test(password) }
            if (!password) return 0;
            for (var i = 0; i < password.length; i++) { letters[password[i]] = (letters[password[i]] || 0) + 1; r += 5.0 / letters[password[i]]; }
            for (var c in variations) { varCount += (variations[c] == true) ? 1 : 0; }
            return parseInt(r + (varCount - 1) * 10);
        }

        // Check password requirements
        function checkPasswordRequirements(password, requirements) {
            if ((requirements == null) || (requirements == '') || (typeof requirements != 'object')) return true;
            if (requirements.min) { if (password.length < requirements.min) return false; }
            if (requirements.max) { if (password.length > requirements.max) return false; }
            var counts = strCount(password);
            if (requirements.numeric && (counts.numeric < requirements.numeric)) return false;
            if (requirements.lower && (counts.lower < requirements.lower)) return false;
            if (requirements.upper && (counts.upper < requirements.upper)) return false;
            if (requirements.nonalpha && (counts.nonalpha < requirements.nonalpha)) return false;
            return true;
        }

        function strCount(password) {
            var counts = { numeric: 0, lower: 0, upper: 0, nonalpha: 0 };
            if (typeof password != 'string') return counts;
            for (var i = 0; i < password.length; i++) {
                if (/\d/.test(password[i])) { counts.numeric++; }
                if (/[a-z]/.test(password[i])) { counts.lower++; }
                if (/[A-Z]/.test(password[i])) { counts.upper++; }
                if (/\W/.test(password[i])) { counts.nonalpha++; }
            }
            return counts;
        }

        function checkToken(e) {
            var t1 = Q('tokenInput').value;
            var t2 = t1.split(' ').join('');
            if (t1 != t2) { Q('tokenInput').value = t2; }
            var enabled = (Q('tokenInput').value.length == 6) || (Q('tokenInput').value.length == 8) || (Q('tokenInput').value.length == 44);
            QE('tokenOkButton', enabled);
            if (enabled && (e != null) && (e.keyCode == 13)) { submitButtonClicked('tokenpanelform'); }
        }

        function resetCheckToken(e) {
            var t1 = Q('resetTokenInput').value;
            var t2 = t1.split(' ').join('');
            if (t1 != t2) { Q('resetTokenInput').value = t2; }
            var enabled = (Q('resetTokenInput').value.length == 6) || (Q('resetTokenInput').value.length == 8) || (Q('resetTokenInput').value.length == 44);
            QE('resetTokenOkButton', enabled);
            if (enabled && (e != null) && (e.keyCode == 13)) { submitButtonClicked('resettokenpanelform'); }
        }

        function changeEmailAddress() {
            var email = Q('unconfirmedEmail').innerHTML;
            var x = addHtmlValue("이메일", '<input id=dp1email style=width:230px maxlength=256 value="' + email + '" {{{autocomplete}}}=off onchange=validateEmailAddress() onkeyup=validateEmailAddress() />');
            setDialogMode(1, "이메일 검증", 3, changeEmailAddressEx, x);
            validateEmailAddress();
        }

        function validateEmailAddress() {
            QE('idx_dlgOkButton', (validateEmail(Q('dp1email').value) == true));
        }

        function changeEmailAddressEx() {
            Q('checkEmailVal').value = Q('dp1email').value;
            QH('unconfirmedEmail', Q('dp1email').value);
            Q('checkEmailButton').click();
        }

        function resentEmailConfirmation() {
            Q('checkEmailVal').value = Q('unconfirmedEmail').innerHTML;
            Q('checkEmailButton').click();
        }

        //
        // POPUP DIALOG
        //

        // undefined = Hidden, 1 = Generic Message
        var xxdialogMode;
        var xxdialogFunc;
        var xxdialogButtons;
        var xxdialogTag;
        var xxcurrentView = 0;

        // Display a dialog box
        // Parameters: Dialog Mode (0 = none), Dialog Title, Buttons (1 = OK, 2 = Cancel, 3 = OK & Cancel), Call back function(0 = Cancel, 1 = OK), Dialog Content (Mode 2 only)
        function setDialogMode(x, y, b, f, c, tag) {
            xxdialogMode = x;
            xxdialogFunc = f;
            xxdialogButtons = b;
            xxdialogTag = tag;
            QE('idx_dlgOkButton', true);
            QV('idx_dlgOkButton', b & 1);
            QV('idx_dlgCancelButton', b & 2);
            QV('id_dialogclose', (b & 2) || (b & 8));
            QV('idx_dlgButtonBar', b & 7);
            if (y) QH('id_dialogtitle', y);
            for (var i = 1; i < 24; i++) { QV('dialog' + i, i == x); } // Edit this line when more dialogs are added
            QV('dialog', x);
            if (c) { if (x == 2) { QH('id_dialogOptions', c); } else { QH('id_dialogMessage', c); } }
        }

        function dialogclose(x) {
            var f = xxdialogFunc;
            var b = xxdialogButtons;
            var t = xxdialogTag;
            setDialogMode();
            if (((b & 8) || x) && f) f(x, t);
        }

        function messagebox(t, m) { QH('id_dialogMessage', m); setDialogMode(1, t, 1); }
        function statusbox(t, m) { QH('id_dialogMessage', m); setDialogMode(1, t); }
        function getDocWidth() { if (window.innerWidth) return window.innerWidth; if (document.documentElement && document.documentElement.clientWidth && document.documentElement.clientWidth != 0) return document.documentElement.clientWidth; return document.getElementsByTagName('body')[0].clientWidth; }
        function haltEvent(e) { if (e.preventDefault) e.preventDefault(); if (e.stopPropagation) e.stopPropagation(); return false; }
        function haltReturn(e) { if (e.keyCode == 13) { haltEvent(e); } }
        function validateEmail(v) { var emailReg = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; return emailReg.test(v); } // New version
        function putstore(name, val) { try { if (typeof (localStorage) === 'undefined') return; localStorage.setItem(name, val); } catch (e) { } }
        function getstore(name, val) { try { if (typeof (localStorage) === 'undefined') return val; var v = localStorage.getItem(name); if ((v == null) || (v == null)) return val; return v; } catch (e) { return val; } }
        function format(format) { var args = Array.prototype.slice.call(arguments, 1); return format.replace(/{(\d+)}/g, function (match, number) { return typeof args[number] != 'undefined' ? args[number] : match; }); };
        function addTextLink(subtext, text, link) { var i = text.toLowerCase().indexOf(subtext.toLowerCase()); if (i == -1) { return text; } return text.substring(0, i) + '<a href="' + link + '">' + subtext + '</a>' + text.substring(i + subtext.length); }
        function addHtmlValue(t, v) { return '<table><td style=width:120px;text-align:left>' + t + '<td><b>' + v + '</b></table>'; }

    </script>

</body></html>